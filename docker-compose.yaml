services:
  db:
    container_name: db
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: discord
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d discord']
      interval: 5s
      timeout: 5s
      retries: 10


  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0-management
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_running']
      interval: 10s
      timeout: 5s
      retries: 5
  minio:
    container_name: minio
    image: docker.io/bitnami/minio:2022
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
    restart: always
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - 'minio_data:/data'
      - ./minio-init.sh:/docker-entrypoint-init.d/minio-init.sh
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 10s
      timeout: 5s
      retries: 5

  core:
    container_name: core
    build:
      context: .
      dockerfile: apps/core/Dockerfile
      args:
        - USER_DATABASE_URL=postgresql://admin:admin@db:5432/discord?schema=auth
    env_file: .env
    restart: always
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  chat:
    container_name: chat
    build:
      context: .
      dockerfile: apps/chat/Dockerfile
      args:
        - CHAT_DATABASE_URL=postgresql://admin:admin@db:5432/discord?schema=chat
    env_file: .env
    restart: always
    ports:
      - '3001:3001'
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  server:
    container_name: server
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    env_file: .env
    restart: always
    environment:
      SERVER_DATABASE_URL: 'postgresql://admin:admin@db:5432/discord?schema=servers'
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    env_file: .env
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      db:
        condition: service_started
      minio:
        condition: service_started
      rabbitmq: 
        condition: service_started
      core:
        condition: service_started
      chat:
        condition: service_started
      server:
        condition: service_started
volumes:
  minio_data:
    driver: local
