services:
  db:
    container_name: db
    image: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: discord
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d discord']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
    - backend

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://admin:admin@db:5432/discord?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - backend
    depends_on:
      - db
    healthcheck:
      test: ['CMD-SHELL', 'wget -q http://localhost:9187/metrics -O - | grep pg_up']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: redis
    image: redis:5.0
    restart: unless-stopped
    ports:
      - 6379:6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping"] 
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    ports:
      - "9121:9121"
    networks:
      - backend
    depends_on:
      - redis
    healthcheck:
      test: ['CMD-SHELL', 'wget -q http://localhost:9121/metrics -O - | grep redis_up']
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0-management
    hostname: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_PROMETHEUS: true
      RABBITMQ_ADDITIONAL_ERL_ARGS: "-rabbitmq_management prometheus_graphite.aggregate_metrics true"
    ports:
      - 15692:15692
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_running']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - backend

  minio:
    container_name: minio
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
      MINIO_PROMETHUS_URL: "prometheus:9090"
    restart: unless-stopped
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-storage:/data
      - minio-config:/root/.minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s  
      timeout: 20s  
      retries: 3
    networks:
    - backend

  core:
    container_name: core
    build:
      context: .
      dockerfile: apps/core/Dockerfile
    env_file: .env
    restart: unless-stopped
    ports:
      - '3002:3002'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3002/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
    - backend

  chat:
    container_name: chat
    build:
      context: .
      dockerfile: apps/chat/Dockerfile
    env_file: .env
    restart: unless-stopped
    ports:
      - '3001:3001'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3001/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
    - backend

  server:
    container_name: server
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    env_file: .env
    restart: unless-stopped
    ports:
      - '3003:3003'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3003/health || exit 1']
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
    - backend

  gateway:
    container_name: gateway
    build:
      context: .
      dockerfile: apps/gateway/Dockerfile
    env_file: .env
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - ./secrets:/app/secrets
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      core:
        condition: service_healthy
      chat:
        condition: service_healthy
      server:
        condition: service_healthy
    networks:
    - backend


  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - postgres-exporter
      - redis-exporter

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3004:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  redis_data:
  minio-storage:
  minio-config:
  prometheus_data:
  grafana-storage:

networks:
  backend:
